{"name":"Tornado-rest-handler","tagline":"A simple Python Tornado handler that manage Rest requests automatically","body":"tornado-rest-handler\r\n====================\r\n\r\n![Continuous Integration Status](https://secure.travis-ci.org/paulocheque/tornado-rest-handler.png)\r\n\r\nA simple Python Tornado handler that manage Rest requests automatically\r\n\r\n* [Basic Example of Usage](#basic-example-of-usage)\r\n  * [Routes](#routes)\r\n  * [Handlers](#handlers)\r\n  * [Templates](#templates)\r\n* [Installation](#installation)\r\n* [Change Log](#change-log)\r\n* [TODO](#todo)\r\n\r\nBasic Example of Usage\r\n------------------------\r\n\r\nIn the current implementation, there is only one handler for MongoEngine ORM, besides the library does not depends on the MongoEngine!\r\n\r\nWith +-10 lines of code you can create a handler for your ORM.\r\n\r\nRoutes\r\n------------------------\r\n\r\nOne handler for every Rest routes\r\n\r\n* GET    /animal index      display a list of all animals\r\n* GET    /animal/new        new return an HTML form for creating a new animal\r\n* POST   /animal create     create a new animal\r\n* GET    /animal/:id show   show an animal\r\n* GET    /animal/:id/edit   return an HTML form for editing a photo\r\n* PUT    /animal/:id        update an animal data\r\n* DELETE /animal/:id        delete an animal\r\n\r\nSince HTML5-forms does not support PUT/DELETE. It is possible to use the following methods too:\r\n\r\n* POST /animals/:id/delete   Same as DELETE /animals/:id\r\n* POST /animals/:id          Same as PUT    /animals/:id\r\n\r\n\r\n```python\r\nfrom tornado_rest_handler import routes, rest_routes\r\n\r\napplication = tornado.web.Application(routes([\r\n    # another handlers here\r\n\r\n    rest_routes(Animal),\r\n\r\n    # another handlers here\r\n]))\r\n```\r\n\r\nThe library does not support auto-plurazation yet, so you may want to change the prefix:\r\n\r\n```python\r\napplication = tornado.web.Application(routes([\r\n    rest_routes(Animal, prefix='animals'),\r\n]))\r\n```\r\n\r\nHandlers\r\n------------------------\r\n\r\nAll the get/post/put/delete methods are implemented for you, but if you want to customize some behavior, you write your own handler:\r\n\r\n```python\r\nclass AnimalHandler(tornado.web.RequestHandler):\r\n    pass # your custom methods here\r\n```\r\n\r\nAnd then, registered it:\r\n\r\n```python\r\napplication = tornado.web.Application(routes([\r\n    rest_routes(Animal, handler=AnimalHandler),\r\n]))\r\n```\r\n\r\nTo create a RestHandler for your ORM you must override the RestHandler class and implement the following methods:\r\n\r\n```python\r\nclass CouchDBRestHandler(RestHandler):\r\n    def instance_list(self): return [] # it can return a list or a queryset etc\r\n    def find_instance_by_id(self, obj_id): pass\r\n    def save_instance(self, obj): pass\r\n    def update_instance(self, obj): pass\r\n    def delete_instance(self, obj): pass\r\n```\r\n\r\nBy default, the list page will show all models of that type. To filter by user or other properties, override the instance_list method:\r\n\r\n```python\r\nclass AnimalHandler(tornado.web.RequestHandler):\r\n    def instance_list(self):\r\n        return Animal.objects.filter(...)\r\n```\r\n\r\n\r\nTemplates\r\n------------------------\r\n\r\nYou must create your own template. Tempaltes will receive the variables **obj** or **objs** and **alert** in case there is some message.\r\n\r\nIt must have the names list.html, show.html and edit.html. But you can customize if you want to:\r\n\r\n```python\r\nrest_routes(Animal, list_tempalte='another_name.html', edit_template='...', show_template='...'),\r\n```\r\n\r\nBy default, the directory is the model name in lower case (animal in this example).\r\n\r\n* animal/list.html\r\n* animal/show.html\r\n* animal/edit.html\r\n\r\nBut you may change the directory though:\r\n\r\n```python\r\nrest_routes(Animal, template_path='your_template_path'),\r\n```\r\n\r\n\r\nInstallation\r\n------------\r\n\r\n```\r\npip install tornado-rest-handler\r\n```\r\n\r\n#### or\r\n\r\n```\r\n1. Download zip file\r\n2. Extract it\r\n3. Execute in the extracted directory: python setup.py install\r\n```\r\n\r\n#### Development version\r\n\r\n```\r\npip install -e git+git@github.com:paulocheque/tornado-rest-handler.git#egg=tornado-rest-handler\r\n```\r\n\r\n#### requirements.txt\r\n\r\n```\r\ntornado-rest-handler==0.0.3\r\n# or use the development version\r\ngit+git://github.com/paulocheque/tornado-rest-handler.git#egg=tornado-rest-handler\r\n```\r\n\r\n#### Upgrade:\r\n\r\n```\r\npip install tornado-rest-handler --upgrade --no-deps\r\n```\r\n\r\n#### Requirements\r\n\r\n* Python 2.6 or 2.7\r\n* Tested with Tornado 2.4.1\r\n\r\n\r\nChange Log\r\n-------------\r\n\r\n#### 0.0.3 (2013/03/31)\r\n* [new] CrudHandler extracted from RestHandler.\r\n* [new] Dynamic handlers with dynamic routes (rest_routes function).\r\n* [new] New redirect_pos_action attribute.\r\n* [new] Function routes added to facilitate routes integration.\r\n* [new] Method raise403 useful method in the handler.\r\n* [update] All attributes are now in lower case.\r\n* [update] Stronger uri discover algoritihm.\r\n* [update] Using only AssertionError exceptions.\r\n* [bugfix] Using redirects instead of rendering after actions.\r\n\r\n\r\n#### 0.0.2 (2013/03/30)\r\n* [update] RestHandler adapted to be used for other ORMs.\r\n* [new] MongoEngineRestHandler\r\n* [new] Template customization: LIST_TEMPLATE, EDIT_TEMPLATE, SHOW_TEMPLATE variables.\r\n* [update] Using OO instead of metaclasses for object list.\r\n* [update] Better exception to alert bad implementations.\r\n* [tests] Initial unit tests.\r\n\r\n#### 0.0.1 (2013/03/30)\r\n\r\n* [new] RestHandler for MongoEngine\r\n\r\n\r\nTODO\r\n-------------\r\n\r\n* Handlers for another ORMs (other than MongoEngine).\r\n* Pagination\r\n* Send valiation errors to forms\r\n* i18n\r\n* Use fields and exclude to facilitate auto-generate forms:\r\n* plurarize\r\n* splitted handlers\r\n","google":"UA-39732118-1","note":"Don't delete this file! It's used internally to help with page regeneration."}